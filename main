import 'dart:math' as math;
import 'package:flutter/material.dart';

const int maxSeeds = 240;

void main() {
  runApp(const Sunflower());
}

class Sunflower extends StatefulWidget {
  const Sunflower({super.key});

  @override
  State<StatefulWidget> createState() {
    return _SunflowerState();
  }
}

class _SunflowerState extends State<Sunflower> {
  int seeds = 0;
  bool isGrowing = false;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        brightness: Brightness.dark,
        appBarTheme: const AppBarTheme(elevation: 2),
      ),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Sunflower'),
        ),
        body: Center(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Expanded(
                child: SunflowerWidget(seeds),
              ),
              const SizedBox(height: 20),
Text('Contagem Regressiva: ${maxSeeds - seeds.round()}'),
              SizedBox(
                width: 400,
                child: Slider(
                  min: 0,
                  max: maxSeeds.toDouble(),
                  value: seeds.toDouble(),
                  onChanged: (val) {
                    setState(() => seeds = val.round());
                  },
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: startGrowing,
                child: Text(isGrowing ? 'Parar' : 'In√≠cio'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void startGrowing() {
    if (isGrowing) {
      setState(() {
        isGrowing = false;
      });
      return;
    }

    setState(() {
      isGrowing = true;
    });

    growSeeds();
  }

  void growSeeds() async {
    while (isGrowing && seeds < maxSeeds) {
      await Future.delayed(const Duration(milliseconds: 2));
      setState(() {
        seeds = math.min(seeds + 5, maxSeeds);
      });
    }
  }
}

class SunflowerWidget extends StatelessWidget {
  static const tau = math.pi * 2;
  static const scaleFactor = 1 / 40;
  static const size = 600.0;
  static final phi = (math.sqrt(5) + 1) / 2;
  static final rng = math.Random();

  final int seeds;

  const SunflowerWidget(this.seeds, {super.key});

  @override
  Widget build(BuildContext context) {
    final seedWidgets = <Widget>[];

    for (var i = 0; i < seeds; i++) {
      final t = i / seeds;

      final x = 16 * math.pow(math.sin(t * tau), 3);
      final y = 13 * math.cos(t * tau) -
                5 * math.cos(2 * t * tau) -
                2 * math.cos(3 * t * tau) -
                math.cos(4 * t * tau);

      seedWidgets.add(AnimatedAlign(
        key: ValueKey(i),
        duration: Duration(milliseconds: rng.nextInt(500) + 250),
        curve: Curves.easeInOut,
        alignment: Alignment(x / 20, -y / 20),
        child: Dot(seeds >= maxSeeds),
      ));
    }

    if (seeds >= maxSeeds) {
      seedWidgets.add(Center(
        child: Text(
          'Eu Te Amo!',
          style: TextStyle(
            fontSize: 32,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
      ));
    }

    for (var j = seeds; j < maxSeeds; j++) {
      final x = math.cos(tau * j / (maxSeeds - 1)) * 0.9;
      final y = math.sin(tau * j / (maxSeeds - 1)) * 0.9;

      seedWidgets.add(AnimatedAlign(
        key: ValueKey(j),
        duration: Duration(milliseconds: rng.nextInt(500) + 250),
        curve: Curves.easeInOut,
        alignment: Alignment(x, y),
        child: Dot(seeds >= maxSeeds),
      ));
    }

    return FittedBox(
      fit: BoxFit.contain,
      child: SizedBox(
        height: size,
        width: size,
        child: Stack(
          children: [
            Positioned.fill(
              child: Container(
                decoration: BoxDecoration(
                  gradient: RadialGradient(
                    colors: [Colors.pink, Colors.red.shade900],
                    center: Alignment.center,
                    radius: 0.6,
                    stops: [0.0, 1.0],
                  ),
                ),
              ),
            ),
            ...seedWidgets,
          ],
        ),
      ),
    );
  }
}

class Dot extends StatelessWidget {
  static const size = 5.0;
  static const radius = 3.0;

  final bool isHeart;

  const Dot(this.isHeart, {super.key});

  @override
  Widget build(BuildContext context) {
    return DecoratedBox(
      decoration: BoxDecoration(
        color: isHeart ? Colors.red.shade900 : Colors.white,
        borderRadius: BorderRadius.circular(radius),
      ),
      child: const SizedBox(
        height: size,
        width: size,
      ),
    );
  }
}
